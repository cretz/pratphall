///<reference path='all.d.ts' />

var FILE_APPEND: number;
var FILE_BINARY: number;
var FILE_IGNORE_NEW_LINES: number;
var FILE_NO_DEFAULT_CONTEXT: number;
var FILE_SKIP_EMPTY_LINES: number;
var FILE_USE_INCLUDE_PATH: number;

var GLOB_AVAILABLE_FLAGS: number;
var GLOB_BRACE: number;
var GLOB_MARK: number;
var GLOB_NOCHECK: number;
var GLOB_NOESCAPE: number;
var GLOB_NOSORT: number;
var GLOB_ONLYDIR: number;

var LOCK_EX: number;
var LOCK_NB: number;
var LOCK_SH: number;
var LOCK_UN: number;

var PATHINFO_BASENAME: number;
var PATHINFO_DIRNAME: number;
var PATHINFO_EXTENSION: number;
var PATHINFO_FILENAME: number;

var SEEK_CUR: number;
var SEEK_END: number;
var SEEK_SET: number;

function basename(path: string, suffix?: string): string;
function chgrp(filename: string, group: string): bool;
function chgrp(filename: string, group: number): bool;
function chmod(filename: string, mode: number): bool;
function chown(filename: string, user: string): bool;
function chown(filename: string, user: number): bool;
function clearstatcache(clear_realpath_cache?: bool, filename?: string);
function copy(source: string, dest: string, context?: Pct.PhpResource): bool;
function dirname(path: string): string;
function disk_free_space(directory: string): number;
function disk_total_space(directory: string): number;
function fclose(handle: Pct.PhpResource): bool;
function feof(handle: Pct.PhpResource): bool;
function fflush(handle: Pct.PhpResource): bool;
function fgetc(handle: Pct.PhpResource): string;
function fgetcsv(handle: Pct.PhpResource, length?: number, delimter?: string, enclosure?: string, escape?: string): any[];
function fgets(handle: Pct.PhpResource, length?: number): string;
function fgetss(handle: Pct.PhpResource, length?: number, allowable_tags?: string): string;
function file(filename: string, flags?: number, context?: Pct.PhpResource): string[];
function file_exists(filename: string): bool;
function file_get_contents(filename: string, use_include_path?: bool, context?: Pct.PhpResource, offset?: number, maxlen?: number): string;
function file_put_contents(filename: string, data: string, flags?: number, context?: Pct.PhpResource): number;
function file_put_contents(filename: string, data: any[], flags?: number, context?: Pct.PhpResource): number;
function file_put_contents(filename: string, data: Pct.PhpResource, flags?: number, context?: Pct.PhpResource): number;
function fileatime(filename: string): number;
function filectime(filename: string): number;
function filegroup(filename: string): number;
function fileinode(filename: string): number;
function filemtime(filename: string): number;
function fileowner(filename: string): number;
function fileperms(filename: string): number;
function filesize(filename: string): number;
function filetype(filename: string): string;
function flock(handle: Pct.PhpResource, operation: number, $wouldblock?: number): bool;
function fnmatch(pattern: string, string_: string, flags?: number): bool;
function fopen(filename: string, mode: string, use_include_path?: bool, context?: Pct.PhpResource): Pct.PhpResource;
function fpassthru(handle: Pct.PhpResource): number;
function fputcsv(handle: Pct.PhpResource, fields: any[], delimiter?: string, enclosure?: string): number;
function fread(handle: Pct.PhpResource, length: number): string;
function fscanf(handle: Pct.PhpResource, format: string): any[]; //NOTE: auto-assignment not available
function fseek(handle: Pct.PhpResource, offset: number, whence?: number): number;
function fstat(handle: Pct.PhpResource): Pct.PhpAssocArray;
function ftell(handle: Pct.PhpResource): number;
function ftruncate(handle: Pct.PhpResource, size: number): bool;
function fwrite(handle: Pct.PhpResource, string_: string, length?: number): number;
function glob(pattern: string, flags?: number): string[];
function is_dir(filename: string): bool;
function is_executable(filename: string): bool;
function is_file(filename: string): bool;
function is_link(filename: string): bool;
function is_readable(filename: string): bool;
function is_uploaded_file(filename: string): bool;
function is_writable(filename: string): bool;
function lchgrp(filename: string, group: string): bool;
function lchgrp(filename: string, group: number): bool;
function lchown(filename: string, user: string): bool;
function lchown(filename: string, user: number): bool;
function link(target: string, link: string): bool;
function linkinfo(path: string): number;
function lstat(filename: string): Pct.PhpAssocArray;
function mkdir(pathname: string, mode?: number, recursive?: bool, context?: Pct.PhpResource): bool;
function move_uploaded_file(filename: string, destination: string): bool;
function parse_ini_file(filename: string, process_sections?: bool, scanner_mode?: number): Pct.PhpAssocArray;
function parse_ini_string(ini: string, process_sections?: bool, scanner_mode?: number): Pct.PhpAssocArray;
function pathinfo(path: string): Pct.PhpAssocArray;
function pathinfo(path: string, options: number): any;
function pclose(handle: Pct.PhpResource): number;
function popen(command: string, mode: string): Pct.PhpResource;
function readfile(filename: string, use_include_path?: bool, context?: Pct.PhpResource): number;
function readlink(path: string): string;
function realpath(path: string): string;
function realpath_cache_get(): Pct.PhpAssocArray;
function realpath_cache_size(): number;
function rename(oldname: string, newname: string, context?: Pct.PhpResource): bool;
function rewind(handle: Pct.PhpResource): bool;
function rmdir(dirname: string, context?: Pct.PhpResource): bool;
function stat(filename: string): Pct.PhpAssocArray;
function symlink(target: string, link: string): bool;
function tempnam(dir: string, prefix: string): string;
function tmpfile(): Pct.PhpResource;
function touch(filename: string, time?: number, atime?: number): bool;
function umask(umask?: number): number;
function unlink(filename: string, context?: Pct.PhpResource): bool;