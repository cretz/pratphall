Closure variables test
-----
//top-level func
function a(param: string) { return false; }

var b = a;
a('hey');
//class func
class Foo {
    bar(param: string) { return false; }
    
}

var c = new Foo();
var d = c.bar;
//invocable
class Foo2 {
    __invoke(param: string) { return false; }
    
}

var e = new Foo2();
//func that can accept
function doSomething(closure: (param: string) => bool) {
    closure('hey');
}

//call
doSomething(b);
doSomething(d);
doSomething(e.__invoke);
var f = { g: (param: string) { return false; } };
doSomething(f.g);
-----
//top-level func
function a($param) { return false; }

$b = (new ReflectionFunction('a'))->getClosure();
a('hey');
//class func
class Foo {
    public function bar($param) { return false; }
    
}

$c = new Foo();
$d = (new ReflectionMethod($c, 'bar'))->getClosure($c);
//invocable
class Foo2 {
    public function __invoke($param) { return false; }
    
}

$e = new Foo2();
//func that can accept
function doSomething(callable $closure) {
    $closure('hey');
}

//call
doSomething($b);
doSomething($d);
doSomething($e);
$f = (object)['g' => function ($param) { return false; }];
doSomething($f->g);